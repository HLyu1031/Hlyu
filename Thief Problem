Suppose you are a computer scientist/art thief who has broken into a major art gallery. 
All you have with you to haul out your stolen art is your knapsack which only holds W 
W pounds of art, but for every piece of art you know its value and its weight. 
Write a dynamic programming function to help you maximize your profit. Here is a sample problem for you to use to get started: 
Suppose your knapsack can hold a total weight of 20. You have 5 items as follows:

item     weight      value
  1        2           3
  2        3           4
  3        4           8
  4        5           8
  5        9           10 
  
  
Solution:
We can use recursion to solve this problem:
  
def choose(Weightlist, Valuelist, weight, item_num = [0]*5, all_value = 0, max_value = 0):	
	weight_left = weight
	if weight_left <= Weightlist[0]:
		return 0
	else:
		for i in [c for c in Weightlist if c <= weight_left]:
			all_value = Valuelist[Weightlist.index(i)] + choose(Weightlist, Valuelist, weight - i, item_num)
			item_num[Weightlist.index(i)] += 1
			if all_value > max_value:
				max_value = all_value
	return max_value

print(choose([2, 3, 4, 5, 9], [3, 4, 8, 8, 10], 20))
print(choose([2, 3, 4, 5, 9], [3, 4, 8, 8, 10], 30))

When W is 20, the result is 40.
When W is 30, the result is 59.
